{"id":"src/index.ts","dependencies":[{"name":"C:\\Users\\acer\\Desktop\\UW Coding BootCamp\\Typescript\\TypeScript-Web-Framework\\package.json","includedInParent":true,"mtime":1613337826459}],"generated":{"js":"//! Framework idea\n\n/*\r\n  Model Classes => Handle data, used to represent Users, Blog Posts, Images, etc\r\n  View Classes => Handle HTML and events caused by the user (like clicks)\r\n*/\n//! Framework steps\n\n/*\r\n  1. Create a class to represent a User and all of its data (like name and age)\r\n    a. User class needs to have the ability to store some data, retrieve it, and change it\r\n    b. Also needs to have the ability to notify the rest of the app when some data is changed\r\n    c. User needs to be able to persist dat to an outside server, and the retrieve it at some future point\r\n  *Extraction Approach:\r\n    I Build class User as a 'mega' class with tons of methods:\r\n      class User {\r\n        private data: UserProps; -> Object to store info about a particular user (name, age)\r\n        get(propName:string): (string | number); -> Gets a single piece of info about this user (name, age)\r\n        set(update: UserProps):void; -> Changes info about this user (name, age)\r\n        on(eventName: string, callback:() => {}); -> Registers an event handler with this object, so other parts of the app know when something changes\r\n        trigger(eventName:string):void; -> Triggers an event to tell other parts of the app that someting has changed\r\n        fetch(): Promise; -> Fetches some data from the server about a particular user\r\n        save (): Promise; -> Saves some data about this user to the server\r\n      }\r\n\r\n    II Pefactor User to use composition\r\n    III Refactor User to be a reusable class that can represent any piece of data, not just a User\r\n*/"},"sourceMaps":{"js":{"mappings":[{"source":"src/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":9,"column":0}}],"sources":{"src/index.ts":"//! Framework idea\r\n/*\r\n  Model Classes => Handle data, used to represent Users, Blog Posts, Images, etc\r\n  View Classes => Handle HTML and events caused by the user (like clicks)\r\n*/\r\n\r\n//! Framework steps\r\n/*\r\n  1. Create a class to represent a User and all of its data (like name and age)\r\n    a. User class needs to have the ability to store some data, retrieve it, and change it\r\n    b. Also needs to have the ability to notify the rest of the app when some data is changed\r\n    c. User needs to be able to persist dat to an outside server, and the retrieve it at some future point\r\n  *Extraction Approach:\r\n    I Build class User as a 'mega' class with tons of methods:\r\n      class User {\r\n        private data: UserProps; -> Object to store info about a particular user (name, age)\r\n        get(propName:string): (string | number); -> Gets a single piece of info about this user (name, age)\r\n        set(update: UserProps):void; -> Changes info about this user (name, age)\r\n        on(eventName: string, callback:() => {}); -> Registers an event handler with this object, so other parts of the app know when something changes\r\n        trigger(eventName:string):void; -> Triggers an event to tell other parts of the app that someting has changed\r\n        fetch(): Promise; -> Fetches some data from the server about a particular user\r\n        save (): Promise; -> Saves some data about this user to the server\r\n      }\r\n\r\n    II Pefactor User to use composition\r\n    III Refactor User to be a reusable class that can represent any piece of data, not just a User\r\n*/\r\n"},"lineCount":null}},"error":null,"hash":"7b0437381f400d6d0f92872c047df448","cacheData":{"env":{}}}